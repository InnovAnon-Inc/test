name: Kernel Mod CI

on:
  push:
    branches: [ "kernel" ]
  pull_request:
    branches: [ "kernel" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      #with:
        #submodules: true
        #fetch-depth: 0
    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: check doxygen graphviz
          #linux-headers-amd64
          #linux-headers-$(uname -m)
          #linux-headers-$(uname -r)
        version: 1.0

    - name: checkout Linux kernel
      uses: actions/checkout@v3
      with:
        # https://git.kernel.org/pub/scm/linux/kernel
        repository: torvalds/linux
        ref: v5.4.210
        path: ${{ HOME }}/linux-stable
        fetch-depth: 0
        #submodules: true

    - name: fix bcmp linkage error
      working-directory: ${{ HOME }}/linux-stable
      run: sed -i 's@^CLANG_FLAGS :=@& -fno-builtin-bcmp @' Makefile

    - name: clean kernel source
      working-directory: ${{ HOME }}/linux-stable
      # make LLVM=$CLANG_PATH mrproper
      run: make LLVM=1 mrproper

    - name: configure kernel
      working-directory: ${{ HOME }}/linux-stable
      # make LLVM=$CLANG_PATH defconfig
      run: make LLVM=1 defconfig

    - name: setup for building external modules
      working-directory: ${{ HOME }}/linux-stable
      # make LLVM=$CLANG_PATH modules_prepare
      run: make LLVM=1 headers_install

    - name: install sanitized kernel headers
      working-directory: ${{ HOME }}/linux-stable
      # make LLVM=$CLANG_PATH headers_install
      run: make LLVM=1 headers_install

    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        # ninja version to download. Default: 1.10.0
        version: 1.10.0

    #- name: Build with CMake
    #    uses: ashutoshvarma/action-cmake-build@master
    #    with:
    #      build-dir: ${{ runner.workspace }}/build
    #      cc: ${{ matrix.config.cc }}
    #      cxx: ${{ matrix.config.cxx }}
    #      configure-options: -G Ninja
    #      build-type: Release

    - name: configure
      run: cmake -S . -B build -GNinja -DCMAKE_BUILD_TYPE=Release

    - name: build
      run: cmake --build build

    - name: unit test
      run: cmake --build build --target test

    - name: docs
      run: cmake --build build --target docs

    #- name: make distcheck
    #  run: make distcheck

    - name: deploy docs to gh-pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/kernel'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build/docs/html

    - name: binary release archive
      #run: cpack --build build --config CPackConfig.cmake
      run: cmake --build build --target package
    - name: source release archive
      #run: cpack --build build --config CPackSourceConfig.cmake
      run: cmake --build build --target package_source
#    - name: dist
#      run: make dist
#
#    - name: extract
#      run: tar xf test-1.0.0.tar.gz
#
#    # integration test
#    - name: configure 2
#      run: |
#        cd test-1.0.0
#        ./configure
#    - name: make
#      run: |
#        cd test-1.0.0
#        make
#    - name: install
#      run: |
#        cd test-1.0.0
#        t=$(mktemp -d) || exit
#        DESTDIR=$t make install

    - name: Bump version and push tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

#    - name: Create a GitHub release
#      uses: ncipollo/release-action@v1
#      with:
#        tag: ${{ steps.tag_version.outputs.new_tag }}
#        name: Release ${{ steps.tag_version.outputs.new_tag }}
#        body: ${{ steps.tag_version.outputs.changelog }}
#
    - name: Release
      uses: softprops/action-gh-release@v1
      #if: startsWith(github.ref, 'refs/tags/')
      with:
        #body:
        #body_path:
        tag_name: ${{ steps.tag_version.outputs.new_tag }}
        fail_on_unmatched_files: true
        #target_commitish: cmake
        generate_release_notes: true
        #files: test-1.0.0.tar.gz
        files: |
          build/MyApp-*.*.*-*.7z
          build/MyApp-*.*.*-*.sh
          build/MyApp-*.*.*-*.tar.bz2
          build/MyApp-*.*.*-*.tar.gz
          build/MyApp-*.*.*-*.tar.xz
          build/MyApp-*.*.*-*.tar.Z
          build/MyApp-*.*.*-*.zip
          build/myapp_*.*.*_*.deb
        #build/MyApp-1.0.0-Source.tar.xz
        #build/MyApp-1.0.0-Android.sh
        #build/MyApp-1.0.0-Android.tar.gz
        #build/MyApp-1.0.0-Android.tar.Z


